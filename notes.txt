react-native run-ios --simulator="iPhone 4s"

This might be related to https://github.com/facebook/react-native/issues/4968
 1. Clear watchman watches: `watchman watch-del-all`.
  2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`.
  3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm start -- --reset-cache`.
  4. Remove haste cache: `rm -rf /tmp/haste-map-react-native-packager-*`.
    at ModuleResolver.resolveDependency (/Users/brob/Desktop/Working on/BROBSCOXNU/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js:161:1460)
    at ResolutionRequest.resolveDependency (/Users/brob/Desktop/Working on/BROBSCOXNU/node_modules/metro/src/node-haste/DependencyGraph/ResolutionRequest.js:91:16)
    at DependencyGraph.resolveDependency (/Users/brob/Desktop/Working on/BROBSCOXNU/node_modules/metro/src/node-haste/DependencyGraph.js:272:4579)
    at dependencies.map.relativePath (/Users/brob/Desktop/Working on/BROBSCOXNU/node_modules/metro/src/DeltaBundler/traverseDependencies.js:376:19)
    at Array.map (native)
    at resolveDependencies (/Users/brob/Desktop/Working on/BROBSCOXNU/node_modules/metro/src/DeltaBundler/traverseDependencies.js:374:16)
    at /Users/brob/Desktop/Working on/BROBSCOXNU/node_modules/metro/src/DeltaBundler/traverseDependencies.js:212:33
    at Generator.next (<anonymous>)
    at step (/Users/brob/Desktop/Working on/BROBSCOXNU/node_modules/metro/src/DeltaBundler/traverseDependencies.js:297:313)
    at /Users/brob/Desktop/Working on/BROBSCOXNU/node_modules/metro/src/DeltaBundler/traverseDependencies.js:297:473


    ==============================================

    import React, { Component } from 'react';
import { TextInput, View, Text, StyleSheet } from 'react-native';
import { connect } from 'react-redux';
import { Actions } from 'react-native-router-flux';
import { Button, CardSection, Card, Input, EnterPhone } from '../../common';
import { allNumbersRegEx } from '../../helpers/helpersFunctions';
import { updatePhoneNumber, clearAll, addFormInfo } from '../../store/signUp/SignUp';
import { colors } from '../../Colors'

class PhoneNumber extends Component {
  constructor() {
    super();
    this.state = {
      errorMessage: '',
      loading: false,
      phoneNumber1: '',
      phoneNumber2: '',
      phoneNumber3: ''
    }
    this.onButtonPress = this.onButtonPress.bind(this);
    this.textInputRender = this.textInputRender.bind(this);
  }

  async onButtonPress() {
    const { phoneNumber1, phoneNumber2, phoneNumber3 } = this.state;
    const number = `${phoneNumber1}${phoneNumber2}${phoneNumber3}`;
    // if (!allNumbersRegEx(this.props.phoneNumber) || this.props.phoneNumber.length < 10) return this.setState({errorMessage: 'Please Enter Valid Phone Number '});
    if (!allNumbersRegEx(number) || number.length < 10) return this.setState({errorMessage: 'Please Enter Valid Phone Number '});
  
    await this.props.updatePhoneNumber(`${phoneNumber1}${phoneNumber2}${phoneNumber3}`);
    
    this.setState({ loading: true });
    this.props.addFormInfo()
      .then(() => {
        this.props.clearAll();
        // switch scenes
        this.setState({ loading: false });
      })
      .catch((err) => {
        console.log(err);
        this.setState({ loading: false });
      });
  }

  textInputRender(maxLength, placeholder, stateNum) {
    const { inputStyle } = styles;
    return (
      <TextInput
        maxLength={maxLength}
        keyboardType="numeric"
        placeholder={placeholder}
        autoCorrect={false}
        style={inputStyle}
        value={[`this.state.phoneNumber${stateNum}`]}
        onChangeText={text => {
          this.setState({
            errorMessage: "",
            [`phoneNumber${stateNum}`]: text,
          });
        }}
      />
    )
  }

  render() {
    const { circle, circleContainer, circleSelected, errorText, containerStyle, labelStyle } = styles;
    return (
      <Card>

        <View style={circleContainer}>
          <View style={circle} />
          <View style={circle} />
          <View style={circleSelected} />
        </View>
        {/*
        <CardSection>
          <Input
            label="Phone Num"
            placeholder="Phone Number"
            value={this.props.phoneNumber1}
            onChangeText={text => {
              this.setState({ errorMessage: "" });
              this.props.updatePhoneNumber(text);
            }}
            keyboardType={"numeric"}
            maxLength={10}
          />
        </CardSection>
        */}
        <CardSection>
          <View style={containerStyle}>
            <Text style={labelStyle}>Phone Number</Text>
            <Text>(</Text>
            {this.textInputRender(3, '555', '1')}
            <Text>)</Text>
            {this.textInputRender(3, '555', '2')}
            <Text>-</Text>
            {this.textInputRender(4, '5555', '3')}
            {/*
            <TextInput
              maxLength={3}
              keyboardType="numeric"
              placeholder={'555'}
              autoCorrect={false}
              style={inputStyle}
              value={this.state.phoneNumber1}
              onChangeText={text => {
                this.setState({
                  errorMessage: "",
                  phoneNumber1: text,
                });
              }}
            />
            <Text>)</Text>
            <TextInput
              maxLength={3}
              keyboardType="numeric"
              placeholder={"555"}
              autoCorrect={false}
              style={inputStyle}
              value={this.state.phoneNumber2}
              onChangeText={text => {
                this.setState({
                  errorMessage: "",
                  phoneNumber2: text,
                });
              }}
            />
            <Text>-</Text>
            <TextInput
              maxLength={4}
              keyboardType="numeric"
              placeholder={"5555"}
              autoCorrect={false}
              style={inputStyle}
              value={this.state.phoneNumber3}
              onChangeText={text => {
                // this.setState({errorMessage: ""});
                this.setState({
                  errorMessage: "",
                  phoneNumber3: text
                });
              }}
            />
            */}
          </View>
        </CardSection>

        <CardSection>
          <Button
            buttonText="Verify by Text"
            onPress={this.onButtonPress}
          />
        </CardSection>

        <CardSection>
          <Button
            buttonText="Verify by Email"
            onPress={() => this.onButtonPress}
          />
        </CardSection>

        <CardSection>
          <Text style={errorText}>
            {this.state.errorMessage}
          </Text>
        </CardSection>

      </Card>
    )
  }
}

export default connect(
  state => ({
    // phoneNumber: state.signUp.SignUp.phoneNumber

    // HAVE THESE ALL HERE FOR TESTING PURPOSES
    firstName: state.signUp.SignUp.firstName,
    lastName: state.signUp.SignUp.lastName,
    phoneNumber: state.signUp.SignUp.phoneNumber,
    password: state.signUp.SignUp.password,
    zipCode: state.signUp.SignUp.zipCode,
    email: state.signUp.SignUp.email
  }),
  {
    updatePhoneNumber,
    clearAll,
    addFormInfo
  }
)(PhoneNumber);

const { NU_Red, NU_Blue, NU_White, NU_Grey } = colors

const styles = StyleSheet.create({
  circle: {
    height: 12,
    width: 12,
    backgroundColor: NU_Blue,
    borderRadius: 25,
    margin: 5
  },
  circleSelected: {
    height: 12,
    width: 12,
    backgroundColor: NU_Red,
    borderRadius: 25,
    margin: 5
  },
  circleContainer: {
    height: '13%',
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: NU_Grey
  },
  errorText: {
    color: NU_Red,
    width: '100%',
    display: 'flex',
    textAlign: 'center'
  },

  inputStyle: {
    color: '#000',
    paddingRight: 5,
    paddingLeft: 5,
    fontSize: 18,
    lineHeight: 23,
    flex: 1,
    // backgroundColor: 'blue',
    textAlign: 'center'
  },
  labelStyle: {
    fontSize: 18,
    paddingLeft: 20,
    flex: 3
  },
  containerStyle: {
    height: 40,
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  }
});

